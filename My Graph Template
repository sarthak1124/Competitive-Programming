#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define all(x) x.begin(),x.end()
#define x first
#define y second
#define f(i,a,b) for(ll i=a;i<b;i++)
#define rof(i,a,b) for(ll i=a;i>b;i--)
#define endl "\n"
ll mod=1e9+7;
//cout << fixed << setprecision(14);
//map<pll,ll> mp; //edge weight
vector<ll> a[500001];
bool visited[500001];
//vector<vector<ll>> c(500001);// components // size nhi diya to 2d vector nahi chalte IMPORTANT
//To search ki konsa element konse component me // use ll compno[500001]; component number and line 22
//or can also use vector<unordered_map<ll,ll>> c(500001) and c[index][i]++ on line 22

// void component_dfs(ll index,ll i)
// {  visited[i]=true;  c[index].pb(i); // compno[i]=index;
//    for(auto it=a[i].begin();it!=a[i].end();it++)
//        if(!visited[*it])  component_dfs(index,*it);
// }

// //int main() me components[0,n-1] or [1,n] as per question
// //vector<> c me to index 0 se hi insert hoga
// void components(ll start,ll n)  //c[] ka size <=n break jaha c[i].size()==0 hojaye
// {ll index=0;
//    for(ll i=start;i<=n;i++)
//          if(!visited[i])   {component_dfs(index,i); index++;}
// }
// print component me take care i print a[i][j]. NO Print c[i][j]

// ll bfs(ll st,ll en) // shortest path bw start and end
// { 	ll ans=0;
// 	queue<ll> q; q.push(st); q.push(-1);
// 	while(!q.empty())
// 	{
// 		if(q.front()==-1) {ans++;q.pop();if(!q.empty()) q.push(-1);continue;}
// 		int f=q.front();q.pop();visited[f]=true;
// 		if(f==en) break;
// 		for(auto it=a[f].begin();it!=a[f].end();it++)	if(!visited[*it]) {q.push(*it);visited[*it]=true;}
// 	}
// 	return ans;
// }

// void dfs(ll i)
// {  visited[i]=true;  
//    for(auto it=a[i].begin();it!=a[i].end();it++)
//        if(!visited[*it]) dfs(*it);
// // jo bhi main kaam ho
// }

void solve()
{
    
ll n,e; cin>>n>>e;

f(i,0,e)
{
    ll x,y; cin>>x>>y;
    a[x].pb(y); a[y].pb(x);
// mp[{x,y}]=w;mp[{y,x}]=w; // for weighted graph tree
}
f(i,0,1+n) visited[i] = false;



}
int main()
{

ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    ll t=1;
    cin>>t;
    while(t--)
    {
    
    solve();
    
    }
cerr << "Time elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
}

